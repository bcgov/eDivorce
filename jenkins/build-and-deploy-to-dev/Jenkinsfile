import com.openshift.jenkins.plugins.OpenShiftDSL;

String getImageTagHash(OpenShiftDSL openshift, String imageName, String tag = "") {

  if(!tag?.trim()) {
    tag = "latest"
  }

  def istag = openshift.raw("get istag ${imageName}:${tag} -o template --template='{{.image.dockerImageReference}}'")
  return istag.out.tokenize('@')[1].trim()
}

void build(OpenShiftDSL openshift, String buildConfigName, int waitTimeout = 10, String contextDirectory = '', String envVars = '') {

  def buildFromDir = ''

  // Find all of the build configurations associated to the application ...
  echo "Looking up build configurations for ${buildConfigName} ..."
  def buildconfigs = openshift.selector("bc", "${buildConfigName}")
  echo "Found ${buildconfigs.count()} buildconfigs: ${buildconfigs.names()}"

  // Inject environment variables into the build as needed ...
  if (envVars?.trim()) {
    echo "Setting environment variables on bc/${buildConfigName} ..."
    echo "envVars: ${envVars}"
    buildconfigs.set("env bc/${buildConfigName} ${envVars}")
  }

  // Perform a binary build as needed ...
  if (contextDirectory?.trim()) {
    echo "Setting up for binary build using the source in the ${contextDirectory} directory ..."
    buildFromDir = "--from-dir='${contextDirectory}'"
    echo "buildFromDir: ${buildFromDir}"
  }

  // Cancel all running builds, starting over ...
  echo "Canceling all previous build instances ..."
  buildconfigs.cancelBuild()

  // Kick off all the builds in parallel ...
  def builds = buildconfigs.startBuild("${buildFromDir}")
  echo "Started ${builds.count()} builds: ${builds.names()}"

  timeout(waitTimeout) {
    // Wait for all the builds to complete ...
    // This section will exit after the last build completes.
    echo "Waiting for builds to complete ..."
    builds.withEach {
      // untilEach and watch - do not support watching multiple named resources,
      // so we have to feed it one at a time.
      it.untilEach(1) {
          echo "${it.object().status.phase} - ${it.name()}"
          return (it.object().status.phase == "Complete")
      }
    }
  }

  echo "Builds complete ..."
}

void deploy(String appName, String appSuffix, String imageName, String namespace, String envTag) {
  openshift.withCluster() {
    openshift.withProject() {

      echo "Tagging ${imageName} for deployment to ${envTag} ..."

      // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
      // Tag the images for deployment based on the image's hash
      def IMAGE_HASH = getImageTagHash(openshift, "${imageName}")
      echo "IMAGE_HASH: ${IMAGE_HASH}"
      openshift.tag("${imageName}@${IMAGE_HASH}", "${imageName}:${envTag}")
    }

    echo "Watching rollout of ${appName}${appSuffix} in ${namespace}-${envTag} ..."
    openshift.withProject("${namespace}-${envTag}") {
        def dc = openshift.selector('dc', "${appName}${appSuffix}")
        // Wait for the deployment to complete.
        // This will wait until the desired replicas are all available
        dc.rollout().status()
    }

    echo "Deployment Complete."
  }
}

node {
  properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']]])  

  def waitTimeout = 30
  def pipeline_name = "build-and-deploy-to-dev"
  def buildApps = ['edivorce-django']
  def appName = 'edivorce-django'
  def imageName = 'edivorce-django'
  def namespace = 'ed44ad'
  def destination = 'dev'
  def appSuffix = ''

  stage("Cancel previous builds") {
    script {
      openshift.withCluster() {
        openshift.withProject() {
          echo "Looking for the latest ${pipeline_name} build ..."
          def latestBuildNumber = 0
          def builds = openshift.selector("build", [ name : "${pipeline_name}" ])
          builds.withEach {
            int nextBuildNumber = "${it.object().metadata.annotations.get("openshift.io/build.number")}" as Integer
            echo "${it.name()} ..."
            if (nextBuildNumber > latestBuildNumber) {
              latestBuildNumber = nextBuildNumber
            }
          }

          echo "Latest build number is ${latestBuildNumber}, canceling all previous pipeline instances ..."
          builds.withEach {
            int buildNumber = "${it.object().metadata.annotations.get("openshift.io/build.number")}" as Integer
            if (buildNumber != latestBuildNumber) {
              echo "Canceling ${it.name()} ..."
              it.cancelBuild()
            }
          }
        }
      }
    }
  }

  buildApps.each {
    stage("Build ${it}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {
            echo "Building the ${it} image ..."
            build(openshift, "${it}", waitTimeout)
          }
        }
      }
    }
  }

  stage("Deploy ${destination}") {
    script {
      echo "Deploy ${appName}${appSuffix} to ${namespace}-${destination} ..."
      deploy("${appName}",
            "${appSuffix}",
            "${imageName}",
            "${namespace}",
            "${destination}")
    }
  }
}